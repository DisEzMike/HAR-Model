{
  "model_info": {
    "version": "3_classes_4_features",
    "description": "Simplified HAR model with 3 activity classes using accelerometer only",
    "input_shape": [
      100,
      4
    ],
    "output_classes": 3,
    "sensor_focus": "accelerometer_only",
    "classes": [
      "IDLE",
      "RUN",
      "WALK"
    ],
    "class_encoding": {
      "IDLE": 0,
      "RUN": 1,
      "WALK": 2
    },
    "class_descriptions": {
      "IDLE": "Standing still or sitting without movement",
      "RUN": "Running activity with high acceleration variance",
      "WALK": "Walking activity with moderate periodic movement"
    },
    "removed_classes": [
      "STAIRS",
      "UPSTAIRS",
      "DOWNSTAIRS"
    ]
  },
  "preprocessing": {
    "window_size": 100,
    "sampling_rate": 50,
    "step_size": 50,
    "overlap_seconds": 1.0,
    "window_duration_seconds": 2.0,
    "required_sensors": [
      "accelerometer"
    ],
    "optional_sensors": [],
    "removed_sensors": [
      "gyroscope",
      "magnetometer"
    ],
    "features": [
      "accelerometer_x",
      "accelerometer_y",
      "accelerometer_z",
      "accelerometer_magnitude"
    ],
    "feature_descriptions": {
      "accelerometer_x": "X-axis acceleration in m/s²",
      "accelerometer_y": "Y-axis acceleration in m/s²",
      "accelerometer_z": "Z-axis acceleration in m/s²",
      "accelerometer_magnitude": "Magnitude sqrt(ax² + ay² + az²)"
    },
    "feature_engineering": {
      "raw_accelerometer": 3,
      "magnitude_features": 1,
      "total_features": 4,
      "removed_features": [
        "gyroscope",
        "kurtosis",
        "density"
      ],
      "magnitude_calculation": "sqrt(ax² + ay² + az²)"
    },
    "normalization": {
      "method": "StandardScaler",
      "per_feature": true,
      "fit_on_training": true,
      "description": "Use saved scaler parameters from training",
      "note": "Load scaler from scaler_3classes.pkl file"
    }
  },
  "model_architecture": {
    "type": "CNN",
    "framework": "TensorFlow/Keras",
    "input_shape": [
      100,
      4
    ],
    "conv_layers": 4,
    "filters": [
      64,
      128,
      256,
      128
    ],
    "kernel_sizes": [
      3,
      3,
      3,
      3
    ],
    "pooling": "MaxPooling1D",
    "global_pooling": "GlobalAveragePooling1D",
    "dense_layers": [
      256,
      128
    ],
    "dropout_rates": [
      0.2,
      0.2,
      0.3,
      0.3,
      0.4,
      0.4
    ],
    "activation": "relu",
    "output_activation": "softmax",
    "output_units": 3,
    "optimizer": "Adam",
    "loss": "categorical_crossentropy"
  },
  "deployment": {
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "model_formats": {
      "tflite": "cnn_har_3classes.tflite",
      "onnx": "cnn_har_3classes.onnx",
      "h5": "cnn_har_3classes.h5"
    },
    "optimization": "float16",
    "target_specs": {
      "model_size_mb": "<3MB",
      "inference_time_ms": "<10ms",
      "memory_usage_mb": "<5MB",
      "power_consumption": "minimal"
    },
    "requirements": {
      "min_android_api": 21,
      "min_ios_version": "11.0",
      "tensorflow_lite_version": ">=2.0",
      "onnx_runtime_version": ">=1.0"
    }
  },
  "usage_example": {
    "data_collection": {
      "sampling_rate": 50,
      "sensors": [
        "accelerometer"
      ],
      "duration": "2_seconds",
      "buffer_size": 100
    },
    "preprocessing_steps": [
      "1. Collect 100 samples at 50Hz",
      "2. Calculate accelerometer magnitude",
      "3. Apply StandardScaler normalization",
      "4. Reshape to (1, 100, 4) for inference"
    ],
    "inference": [
      "1. Load model (tflite/onnx/h5)",
      "2. Run prediction",
      "3. Get class probabilities",
      "4. Return highest probability class"
    ]
  },
  "performance": {
    "expected_accuracy": ">95%",
    "classes_performance": {
      "IDLE": "Excellent (>98%)",
      "RUN": "Very Good (>95%)",
      "WALK": "Very Good (>93%)"
    },
    "power_efficiency": "High (accelerometer only)",
    "computational_complexity": "Low (4 features only)"
  }
}